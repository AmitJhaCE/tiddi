services:
  # PostgreSQL Database with pgvector
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-work_management_dev}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-devpassword}
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - dev-backend

  # FastAPI Development Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-work_management_dev}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=development
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./database:/app/database
      - api_dev_logs:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-backend
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    networks:
      - dev-backend
    command: redis-server --appendonly yes

  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-devpassword}@postgres:5432/${POSTGRES_DB:-work_management_dev}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - LOG_LEVEL=DEBUG
      - ENVIRONMENT=testing
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./database:/app/database
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - dev-backend
    profiles:
      - testing
    command: ["python", "-m", "pytest", "/app/tests", "-v", "--tb=short"]

  # Database management tool
  adminer:
    image: adminer
    ports:
      - "8080:8080"
    networks:
      - dev-backend

volumes:
  postgres_dev_data:
  redis_dev_data:
  api_dev_logs:

networks:
  dev-backend:
    driver: bridge